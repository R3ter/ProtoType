  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model User {
    id                  String              @id @default(uuid())
    email               String              @unique
    phone_number        String              @unique
    full_name           String
    Role                Role                @default(STUDENT)
    password            String
    Active              Boolean             @default(false)
    MaterialReview      MaterialReview[]    @relation("user")
    Materials           Materials[]
    teacherProfile      TeacherProfile?
    userInfo            UserInfo?
    studentAppoitments  Appointment[] @relation("studentAppoitments")
    teacherAppoitments  Appointment[] @relation("teacherAppoitments")
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
  }

  model UserInfo {
    id                      String           @id @default(uuid())
    userId                  String           @unique
    user                    User             @relation(fields: [userId], references: [id])
    birth_date              DateTime?
    address                 String?
    about                   String?
    image_URL               String?
    longitude               String?
    latitude                String?
    cover_URL               String?
    Current_education_level Education_Level?
    preferred_materials     CourseTag[]
    favoriteCourses         Materials[]
    studentAppointments     Appointment[]
    createdAt               DateTime         @default(now())
  }
  model TeacherProfile {
    id           String        @id @default(uuid())
    teacherId    String        @unique
    user         User          @relation(fields: [teacherId], references: [id])
    appointments Appointment[]
    educationLevel Education_Level[]
    materialTags   CourseTag[]
    workingDays  workingDay[]
    createdAt    DateTime      @default(now())
  }
  
  model Appointment {
    id                  String          @id @default(uuid())
    dateTime            DateTime
    from                String
    to                  String
    date                String
    course              Materials
    courseHoursType     courseHoursType
    coursePrice         Float
    state               Appointment_state @default(waiting)
    note                String
    rejectionReason     String?
    teacherId String
    studentId String
    discountPercentage     Float @default(0)
    studentCount        Int 
    teacher             User @relation("teacherAppoitments",fields: [teacherId],references: [id])
    student             User @relation("studentAppoitments",fields: [studentId],references: [id])
    createdAt           DateTime          @default(now())
  }
  enum Appointment_state {
    accepted
    rejected
    waiting
    finnished
  }
  model TeacherApplication {
    id              String     @id @default(uuid())
    userId          String     @unique
    message         String    
    user            User       @relation(fields: [userId], references: [id])
  }
  model workingDay{
    id           String        @id @default(uuid())
    day Day
    teacherIdAndDay String @unique
    hours String[]
    teacherProfile TeacherProfile @relation(fields: [teacherId], references: [teacherId])
    teacherId    String        
  }

  enum Day {
    sunday
    monday
    tuesday
    wednesday
    thursday
    friday
    saturday
  }
  model CourseTag {
    id               String          @id @default(uuid())
    name             String?
    lookUp           LookUp
  }
  model TeacherReview {
    id               String   @id @default(uuid())
    teacherId        String
    ratingStars      Int
    review           String
    updatedAt        DateTime @updatedAt
    createdAt        DateTime @default(now())
    User             User
  }
  model MaterialReview {
    id          String    @id @default(uuid())
    materialID  String
    userAndMaterialId     String @unique
    ratingStars Int
    review      String
    updatedAt   DateTime  @updatedAt
    createdAt   DateTime  @default(now())
    userId      String
    material    Materials @relation(fields: [materialID], references: [id])
    User        User      @relation("user", fields: [userId], references: [id])
  }

  model Materials {
    id                String           @id @default(uuid())
    name              String?
    createdAt         DateTime         @default(now())
    education_LevelId String
    image_URL         String?
    cover_URL         String?
    description       DLookUp
    lookUp            LookUp
    education_level   Education_Level  @relation(fields: [education_LevelId], references: [id])
    teachers          User[]
    tags              CourseTag[]
    reviews           MaterialReview[]
  }
  model LookUp {
    id              String            @id @default(uuid())
    eng             String
    ar              String
    fr              String?
    createdAt       DateTime          @default(now())
  }

  model DLookUp {
    id             String           @id @default(uuid())
    ar             String?
    eng            String
    fr             String?
  }

  model Education_Level {
    id              String               @id @default(uuid())
    name            String?
    lookUp          LookUp
    type            SchoolType

    oneHour Float 
    OneAndHalf Float
    TwoHours Float 
    ThreeHours Float
    ThreeAndHalf Float
    FourHours Float
  }

  model SchoolType{
    id              String               @id @default(uuid())
    name LookUp
  }
  enum courseHoursType {
    oneHour
    OneAndHalf
    TwoHours
    TwoAndHalf
    ThreeHours
    ThreeAndHalf
    FourHours
  }

  enum Role {
    STUDENT
    TEACHER
  }
