generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  phone_number       String              @unique
  full_name          String
  Role               Role                @default(STUDENT) 
  password           String
  Active             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentAppoitments Appointment[]       @relation("studentAppoitments")
  teacherAppoitments Appointment[]       @relation("teacherAppoitments")
  TeacherApplication TeacherApplication?
  teacherProfile     TeacherProfile?
  TeacherReview      TeacherReview[]     @relation("reviews as teacher")
  studentReview      TeacherReview[]     @relation("reviews that was written by him")
  userInfo           UserInfo?
  Materials          Materials[]
  banned             Boolean             @default(false)
}

model UserInfo {
  id                      String           @id @default(uuid())
  userId                  String           @unique
  birth_date              DateTime?
  address                 String?
  about                   String?
  image_URL               String?
  longitude               String?
  latitude                String?
  cover_URL               String?
  createdAt               DateTime         @default(now())
  education_LevelId       String?
  Current_education_level Education_Level? @relation(fields: [education_LevelId], references: [id])
  user                    User             @relation(fields: [userId], references: [id])
  studentAppointments     Appointment[]
  preferred_materials     CourseTag[]
  favoriteCourses         Materials[]
}

model TeacherProfile {
  id              String            @id @default(uuid())
  teacherId       String            @unique
  createdAt       DateTime          @default(now())
  teacherIsActive Boolean           @default(false)
  IDFrontImageURL String            @default("")
  IDBackImageURL  String            @default("")
  certificateURL  String            @default("")
  Rejected        Boolean           @default(false)
  paperComplete   Boolean           @default(false)
  CV_URL          String?
  image_URL       String?           @default("")
  user            User              @relation(fields: [teacherId], references: [id])
  appointments    Appointment[]
  materialTags    CourseTag[]
  materials       Materials[]
  workingDays     workingDay[]
  educationLevel  Education_Level[]

  major           Major?
}

model Student_Appointment_info {
  id           String        @id @default(uuid())
  student_name String
  full_number  String
  longitude    Float         @default(0)
  latitude     Float         @default(0)
  address      String
  Appointment  Appointment[]
}

model Appointment {
  id                         String                   @id @default(uuid())
  adminAccepted              Boolean                  @default(false)
  date                       String
  courseHoursType            courseHoursType
  coursePrice                Float
  note                       String
  rejectionReason            String?
  teacherId                  String
  studentId                  String
  discountPercentage         Float                    @default(0)
  studentCount               Int
  createdAt                  DateTime                 @default(now())
  userInfoId                 String?
  teacherProfileId           String?
  materialsId                String
  homeWorkPackageId          String?
  stateKey                   String
  from                       DateTime
  to                         DateTime
  student_Appointment_infoId String
  dateTime                   DateTime
  HomeWorkPackage            HomeWorkPackage?         @relation(fields: [homeWorkPackageId], references: [id])
  course                     Materials                @relation(fields: [materialsId], references: [id])
  state                      Appointment_state        @relation(fields: [stateKey], references: [Appoitment_state_key])
  student                    User                     @relation("studentAppoitments", fields: [studentId], references: [id])
  student_info               Student_Appointment_info @relation(fields: [student_Appointment_infoId], references: [id])
  teacher                    User                     @relation("teacherAppoitments", fields: [teacherId], references: [id])
  TeacherProfile             TeacherProfile?          @relation(fields: [teacherProfileId], references: [id])
  UserInfo                   UserInfo?                @relation(fields: [userInfoId], references: [id])
  
  review TeacherReview?
}

model HomeWorkPackage {
  id          String        @id @default(uuid())
  price       Float
  MaterialId  String
  name        String
  Material    Materials     @relation(fields: [MaterialId], references: [id])
  Appointment Appointment[]
}

model Appointment_state {
  id                   String        @id @default(uuid())
  Appoitment_state_key String        @unique
  color                String
  lookUpId             String
  name                 LookUp        @relation(fields: [lookUpId], references: [id])
  Appointment          Appointment[]
}

model TeacherApplication {
  id      String @id @default(uuid())
  userId  String @unique
  message String
  user    User   @relation(fields: [userId], references: [id])
}

model workingDay {
  id              String         @id @default(uuid())
  day             Day
  teacherIdAndDay Json           @unique
  hours           Json[]
  teacherId       String
  teacherProfile  TeacherProfile @relation(fields: [teacherId], references: [teacherId])
}

model CourseTag {
  id               String          @id @default(uuid())
  name             String?
  userInfoId       String?
  teacherProfileId String?
  materialsId      String?
  lookUpId         String
  lookUp           LookUp          @relation(fields: [lookUpId], references: [id])
  Materials        Materials?      @relation(fields: [materialsId], references: [id])
  TeacherProfile   TeacherProfile? @relation(fields: [teacherProfileId], references: [id])
  UserInfo         UserInfo?       @relation(fields: [userInfoId], references: [id])
}

model TeacherReview {
  id          String   @id @default(uuid())
  teacherId   String
  teacher     User    @relation("reviews as teacher",fields: [teacherId],references: [id])
  ratingStars Float
  review      String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  studentId   String
  student     User     @relation("reviews that was written by him",fields: [studentId], references: [id])


  appointment          Appointment @relation(fields: [appoitmentId],references: [id])
  appoitmentId         String @unique
}



model Materials {
  id                String            @id @default(uuid())
  name              String?
  createdAt         DateTime          @default(now())
  education_LevelId String
  image_URL         String?
  cover_URL         String?
  userInfoId        String?
  dLookUpId         String
  lookUpId          String
  teacherProfileId  String?
  description       DLookUp           @relation(fields: [dLookUpId], references: [id])
  education_level   Education_Level   @relation(fields: [education_LevelId], references: [id])
  lookUp            LookUp            @relation(fields: [lookUpId], references: [id])
  TeacherProfile    TeacherProfile?   @relation(fields: [teacherProfileId], references: [id])
  UserInfo          UserInfo?         @relation(fields: [userInfoId], references: [id])
  Appointment       Appointment[]
  tags              CourseTag[]
  HomeWorkPackage   HomeWorkPackage[]
  teachers          User[]

}

model LookUp {
  id                String              @id @default(uuid())
  eng               String
  ar                String
  fr                String?
  createdAt         DateTime            @default(now())
  Appointment_state Appointment_state[]
  CourseTag         CourseTag[]
  Education_Level   Education_Level[]
  Materials         Materials[]
  SchoolType        SchoolType[]
  major             Major?
}

model DLookUp {
  id        String      @id @default(uuid())
  ar        String?
  eng       String
  fr        String?
  Materials Materials[]
}

model Education_Level {
  id             String           @id @default(uuid())
  name           String?
  oneHour        Float
  OneAndHalf     Float
  TwoHours       Float
  TwoAndHalfHours       Float
  ThreeHours     Float
  lookUpId       String
  schoolTypeId   String
  lookUp         LookUp           @relation(fields: [lookUpId], references: [id])
  type           SchoolType       @relation("schoolTypeWithEducationLevel",fields: [schoolTypeId], references: [id])
  Materials      Materials[]
  UserInfo       UserInfo[]
  teacherProfile TeacherProfile[]
  createdAt         DateTime            @default(now())
}

model Major{
  id              String            @id @default(uuid())
  name            LookUp            @relation(fields: [nameId],references: [id])
  nameId          String           
  TeacherProfile  TeacherProfile? @relation(fields: [teacherId],references: [teacherId])
  teacherId       String?
}
model SchoolType {
  id              String            @id @default(uuid())
  lookUpId        String 
  name            LookUp            @relation(fields: [lookUpId], references: [id])
  Education_Level Education_Level[] @relation("schoolTypeWithEducationLevel") 
  createdAt         DateTime            @default(now())

}

enum Day {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum courseHoursType {
  oneHour
  OneAndHalf
  TwoHours
  TwoAndHalf
  ThreeHours
  train
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
